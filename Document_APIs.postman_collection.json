{
  "info": {
    "name": "Document Management APIs",
    "description": "Collection for testing document management system APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api/v1",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login Supervisor",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"supervisor@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login Employee",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"employee@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Documents",
      "item": [
        {
          "name": "Get All Documents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has data array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Documents with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["documents"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        },
        {
          "name": "Get Documents with Select Fields",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents?select=title,description,department",
              "host": ["{{baseUrl}}"],
              "path": ["documents"],
              "query": [
                {
                  "key": "select",
                  "value": "title,description,department"
                }
              ]
            }
          }
        },
        {
          "name": "Get Documents by Department",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents?department=IT",
              "host": ["{{baseUrl}}"],
              "path": ["documents"],
              "query": [
                {
                  "key": "department",
                  "value": "IT"
                }
              ]
            }
          }
        },
        {
          "name": "Get Single Document",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Document has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const document = response.data;",
                  "    pm.expect(document).to.have.property('title');",
                  "    pm.expect(document).to.have.property('file_url');",
                  "    pm.expect(document).to.have.property('created_by');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Test Document",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "This is a test document for API testing",
                  "type": "text"
                },
                {
                  "key": "department",
                  "value": "IT",
                  "type": "text"
                },
                {
                  "key": "machine_id",
                  "value": "MACHINE001",
                  "type": "text"
                },
                {
                  "key": "access_roles",
                  "value": "[\"employee\", \"supervisor\"]",
                  "type": "text"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('documentId', response.data._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Document",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Test Document\",\n  \"description\": \"This document has been updated\",\n  \"department\": \"HR\",\n  \"machine_id\": \"MACHINE002\",\n  \"access_roles\": [\"employee\", \"supervisor\", \"admin\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Document title is updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.title).to.eql('Updated Test Document');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Upload New Version",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "notes",
                  "value": "Updated version with new content",
                  "type": "text"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/documents/{{documentId}}/versions",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{documentId}}", "versions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Version number increased', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.current_version).to.be.above(1);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Document Versions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents/{{documentId}}/versions",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{documentId}}", "versions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Versions array exists', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.be.an('array');",
                  "    pm.expect(response.data.length).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Document",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Get Non-existent Document",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "507f1f77bcf86cd799439011"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document without File",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Document without file",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "This should fail",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unauthorized Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["documents"]
            },
            "auth": {
              "type": "noauth"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
