import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Upload } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { validateFile, formatFileSize, getFileExtension } from '../utils/fileUtils';
import { ALLOWED_FILE_TYPES } from '../constants';
import { apiService } from '../services/api';
import Alert from '../components/UI/Alert';
import Input from '../components/UI/Input';
import Button from '../components/UI/Button';
import LinkButton from '../components/UI/LinkButton';

const NewDocumentPage: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [department, setDepartment] = useState('');
  const [machineId, setMachineId] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [dragOver, setDragOver] = useState(false);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0];
      const validation = validateFile(selectedFile);
      
      if (!validation.isValid) {
        setError(validation.error || 'Invalid file');
        return;
      }
      
      setFile(selectedFile);
      setError(null);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setDragOver(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const droppedFile = e.dataTransfer.files[0];
      const validation = validateFile(droppedFile);
      
      if (!validation.isValid) {
        setError(validation.error || 'Invalid file');
        return;
      }
      
      setFile(droppedFile);
      setError(null);
    }
  };
  const handleRemoveFile = () => {
    setFile(null);
  };

  // Get user ID, checking both id and _id properties
  const userId = user?.id || (user as any)?._id;
  console.log(userId, 'User ID from context');
    const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title || !department || !machineId || !file || !userId) {
      setError('Please fill in all required fields and make sure you are logged in');
      return;
    }
    
    setUploading(true);
    setError(null);
    
    try {
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('title', title);
      formData.append('description', description);
      formData.append('department', department);
      formData.append('machine_id', machineId);
      formData.append('file', file);
      
      // Add the user ID, checking both id and _id properties
      if (userId) {
        formData.append('created_by', userId);
      }
      
      // Upload file to backend using the API service
      const response = await apiService.uploadDocument(formData);
      
      // Log the response for debugging
      console.log('Document upload response:', response);
      
      // Extract the document ID from response - the response is the document object directly
      const documentId = response?._id || response?.id;
      const qrId = response?.qrId; // The qrId is automatically generated by the Document model
      
      if (!documentId) {
        console.error("No document ID found in response:", response);
        setError("Failed to get document ID from response");
        return;
      }

      console.log('Document created with ID:', documentId);
      console.log('QR ID automatically generated:', qrId);
      
      // Navigate to the document detail page - QR code is already available via qrId
      navigate(`/documents/${documentId}`);
      
    } catch (err: any) {
      console.error('Document creation error:', err);
      const errorMessage = err.message || 'Failed to create document';
      setError(errorMessage);
    } finally {
      setUploading(false);
    }
  };

  return (
    <div>
      <div className="mb-6">
        <LinkButton
          to="/documents"
          variant="secondary"
          size="sm"
          icon={ArrowLeft}
          className="inline-flex items-center text-sm font-medium text-blue-700 hover:text-blue-800"
        >
          Back to Documents
        </LinkButton>
      </div>
      
      <div className="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
        <div className="px-4 py-5 sm:px-6">
          <h1 className="text-lg leading-6 font-medium text-gray-900">Add New Document</h1>
          <p className="mt-1 max-w-2xl text-sm text-gray-500">Upload a new document to the system</p>
        </div>
        
        <div className="border-t border-gray-200 p-6">
          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
              <div className="sm:col-span-3">
                <Input
                  type="text"
                  id="title"
                  label="Title *"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  required
                />
              </div>
              
              <div className="sm:col-span-3">
                <Input
                  type="text"
                  id="department"
                  label="Department *"
                  value={department}
                  onChange={(e) => setDepartment(e.target.value)}
                  required
                />
              </div>
              
              <div className="sm:col-span-3">
                <Input
                  type="text"
                  id="machineId"
                  label="Machine ID *"
                  value={machineId}
                  onChange={(e) => setMachineId(e.target.value)}
                  required
                />
              </div>
              
              <div className="sm:col-span-6">
                <label
                  htmlFor="description"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Description
                </label>
                <textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter a description for this document..."
                />
              </div>
              
              <div className="sm:col-span-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Document File *
                </label>
                
                {!file ? (
                  <div
                    className={`border-2 border-dashed rounded-lg p-6 flex flex-col items-center justify-center cursor-pointer ${
                      dragOver
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                    onClick={() => document.getElementById('file-upload')?.click()}
                  >
                    <Upload
                      className={`h-12 w-12 ${
                        dragOver ? 'text-blue-500' : 'text-gray-400'
                      }`}
                    />
                    <p className="mt-2 text-sm font-medium text-gray-900">
                      Drag and drop your file here
                    </p>
                    <p className="text-xs text-gray-500">PDF, DOCX, XLSX (max 10MB)</p>
                    <input
                      id="file-upload"
                      name="file-upload"
                      type="file"
                      className="sr-only"
                      onChange={handleFileChange}
                      accept={ALLOWED_FILE_TYPES.join(',')}
                    />
                  </div>
                ) : (
                  <div className="border rounded-lg p-4 flex items-start justify-between">
                    <div className="flex items-center">
                      <div className="h-10 w-10 flex items-center justify-center rounded-md bg-blue-100 text-blue-700 flex-shrink-0">
                        <Upload size={20} />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm font-medium text-gray-900">{file.name}</p>
                        <p className="text-xs text-gray-500">
                          {formatFileSize(file.size)} â€¢ {getFileExtension(file.name).toUpperCase()}
                        </p>
                      </div>
                    </div>
                    <button
                      type="button"
                      onClick={handleRemoveFile}
                      className="text-gray-400 hover:text-gray-500"
                    >
                      <span className="sr-only">Remove</span>
                      <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            </div>
            
            {error && (
              <div className="mt-6">
                <Alert
                  type="error"
                  message={error}
                  onClose={() => setError(null)}
                />
              </div>
            )}
            
            <div className="mt-6 flex justify-end">
              <LinkButton
                to="/documents"
                variant="secondary"
                size="lg"
                className="mr-3"
              >
                Cancel
              </LinkButton>
              <Button
                type="submit"
                disabled={!title || !department || !machineId || !file || uploading}
                variant="primary"
                size="lg"
                icon={uploading ? Upload : undefined}
              >
                {uploading ? 'Uploading...' : 'Create Document'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default NewDocumentPage;
